// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// convert
RObject convert(std::vector<int> data, int groupSize, int alphabetSize);
RcppExport SEXP rspatiotemp_convert(SEXP dataSEXP, SEXP groupSizeSEXP, SEXP alphabetSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type groupSize(groupSizeSEXP);
    Rcpp::traits::input_parameter< int >::type alphabetSize(alphabetSizeSEXP);
    __result = Rcpp::wrap(convert(data, groupSize, alphabetSize));
    return __result;
END_RCPP
}
// createProbMatX
List createProbMatX(std::vector<int> dataO, std::vector<int> dataH, int groupSize, int alphabetSizeO, int alphabetSizeH);
RcppExport SEXP rspatiotemp_createProbMatX(SEXP dataOSEXP, SEXP dataHSEXP, SEXP groupSizeSEXP, SEXP alphabetSizeOSEXP, SEXP alphabetSizeHSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type dataO(dataOSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataH(dataHSEXP);
    Rcpp::traits::input_parameter< int >::type groupSize(groupSizeSEXP);
    Rcpp::traits::input_parameter< int >::type alphabetSizeO(alphabetSizeOSEXP);
    Rcpp::traits::input_parameter< int >::type alphabetSizeH(alphabetSizeHSEXP);
    __result = Rcpp::wrap(createProbMatX(dataO, dataH, groupSize, alphabetSizeO, alphabetSizeH));
    return __result;
END_RCPP
}
// updateProb
List updateProb(List prevData, std::vector<int> dataO, std::vector<int> dataH, int groupSize, int alphabetSizeO, int alphabetSizeH);
RcppExport SEXP rspatiotemp_updateProb(SEXP prevDataSEXP, SEXP dataOSEXP, SEXP dataHSEXP, SEXP groupSizeSEXP, SEXP alphabetSizeOSEXP, SEXP alphabetSizeHSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type prevData(prevDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataO(dataOSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataH(dataHSEXP);
    Rcpp::traits::input_parameter< int >::type groupSize(groupSizeSEXP);
    Rcpp::traits::input_parameter< int >::type alphabetSizeO(alphabetSizeOSEXP);
    Rcpp::traits::input_parameter< int >::type alphabetSizeH(alphabetSizeHSEXP);
    __result = Rcpp::wrap(updateProb(prevData, dataO, dataH, groupSize, alphabetSizeO, alphabetSizeH));
    return __result;
END_RCPP
}
// forward
double forward(NumericMatrix transProb, NumericMatrix emisProb, std:: vector<double> initProb, std::vector<int> dataO, int dataH, int indexH);
RcppExport SEXP rspatiotemp_forward(SEXP transProbSEXP, SEXP emisProbSEXP, SEXP initProbSEXP, SEXP dataOSEXP, SEXP dataHSEXP, SEXP indexHSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type transProb(transProbSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emisProb(emisProbSEXP);
    Rcpp::traits::input_parameter< std:: vector<double> >::type initProb(initProbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataO(dataOSEXP);
    Rcpp::traits::input_parameter< int >::type dataH(dataHSEXP);
    Rcpp::traits::input_parameter< int >::type indexH(indexHSEXP);
    __result = Rcpp::wrap(forward(transProb, emisProb, initProb, dataO, dataH, indexH));
    return __result;
END_RCPP
}
// forwardVec
RObject forwardVec(NumericMatrix transProb, NumericMatrix emisProb, std:: vector<double> initProb, std::vector<int> dataO, std::vector<int> dataH);
RcppExport SEXP rspatiotemp_forwardVec(SEXP transProbSEXP, SEXP emisProbSEXP, SEXP initProbSEXP, SEXP dataOSEXP, SEXP dataHSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type transProb(transProbSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emisProb(emisProbSEXP);
    Rcpp::traits::input_parameter< std:: vector<double> >::type initProb(initProbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataO(dataOSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataH(dataHSEXP);
    __result = Rcpp::wrap(forwardVec(transProb, emisProb, initProb, dataO, dataH));
    return __result;
END_RCPP
}
// viterbi
RObject viterbi(NumericMatrix transProb, NumericMatrix emisProb, std::vector<double> initProb, std::vector<int> dataV);
RcppExport SEXP rspatiotemp_viterbi(SEXP transProbSEXP, SEXP emisProbSEXP, SEXP initProbSEXP, SEXP dataVSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type transProb(transProbSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emisProb(emisProbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type initProb(initProbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataV(dataVSEXP);
    __result = Rcpp::wrap(viterbi(transProb, emisProb, initProb, dataV));
    return __result;
END_RCPP
}
// train
RObject train(NumericMatrix transProb, NumericMatrix emisProb, std::vector<double> initProb, std::vector<int> dataV);
RcppExport SEXP rspatiotemp_train(SEXP transProbSEXP, SEXP emisProbSEXP, SEXP initProbSEXP, SEXP dataVSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type transProb(transProbSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type emisProb(emisProbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type initProb(initProbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dataV(dataVSEXP);
    __result = Rcpp::wrap(train(transProb, emisProb, initProb, dataV));
    return __result;
END_RCPP
}
